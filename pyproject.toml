[project]
name = "collaboration-bridge"
version = "0.1.0"
description = "A science-backed manager interaction tracking application built with FastAPI, SQLAlchemy, and best practices"
authors = [
    {name = "forkrul", email = "190788+forkrul@users.noreply.github.com"}
]
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
keywords = ["fastapi", "sqlalchemy", "rapport", "management", "interaction-tracking", "psychology"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Groupware",
    "Topic :: Scientific/Engineering :: Human Machine Interfaces",
]

dependencies = [
    "fastapi>=0.115.6",
    "uvicorn[standard]>=0.32.1",
    "pydantic>=2.10.4",
    "pydantic-settings>=2.7.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",
    "aiosqlite>=0.19.0",
    "redis>=5.0.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "email-validator>=2.1.0",
    "structlog>=24.1.0",
    "sentry-sdk>=1.40.0",
    "python-dotenv>=1.0.0",
    # Internationalization
    "babel>=2.13.0",
    "flufl-i18n>=4.1.1",
    "pycountry>=22.3.13",
    "langdetect>=1.0.9",
    "pytz>=2023.3",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.8.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "ipython>=8.20.0",
    "rich>=13.7.0",
]
test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-env>=1.1.0",
    "factory-boy>=3.3.0",
    "faker>=22.0.0",
    "httpx>=0.26.0",
    "behave>=1.2.6",
    "playwright>=1.41.0",
    "pytest-playwright>=0.4.0",
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=2.0.0",
    "sphinxcontrib-mermaid>=0.9.0",
    "myst-parser>=2.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/collaboration_bridge"]

[tool.ruff]
target-version = "py311"
line-length = 88
fix = true

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "D",    # pydocstyle
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # flake8-eradicate
    "RUF",  # Ruff-specific rules
    "S",    # flake8-bandit
    "T20",  # flake8-print
    "SIM",  # flake8-simplify
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D106", # Missing docstring in public nested class
    "S101", # Use of assert detected (allow in tests)
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "S101"]
"docs/*" = ["D"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
no_implicit_optional = true
plugins = ["pydantic.mypy"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/migrations/*"]

[dependency-groups]
dev = [
    "ruff>=0.12.9",
]
test = [
    "httpx>=0.28.1",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
]

